<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Little Snake Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        canvas {
            border: 2px solid #4b5563; /* dark gray border */
            background-color: #f3f4f6; /* light background */
        }
        .game-over {
            animation: pulse 0.5s infinite; /* simple flashing on game over */
        }
        @keyframes pulse {
            0%, 100% { background-color: #fee2e2; }
            50% { background-color: #fca5a5; }
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col items-center justify-center p-4">
    <div class="text-center mb-6">
        <h1 class="text-4xl font-extrabold text-gray-700 mb-3">üêç Snake Game</h1>
        <div class="flex justify-center space-x-8">
            <p class="text-lg">Score: <span id="score" class="font-bold">0</span></p>
            <p class="text-lg">High Score: <span id="high-score" class="font-bold">0</span></p>
        </div>
    </div>

    <canvas id="gameCanvas" width="320" height="320" class="shadow-xl"></canvas>

    <div class="mt-6 flex flex-col items-center">
        <div class="grid grid-cols-3 gap-3 mb-4">
            <div></div>
            <button id="btn-up" class="bg-gray-300 hover:bg-gray-400 p-3 rounded">
                <i class="fas fa-arrow-up"></i>
            </button>
            <div></div>
            <button id="btn-left" class="bg-gray-300 hover:bg-gray-400 p-3 rounded">
                <i class="fas fa-arrow-left"></i>
            </button>
            <div></div>
            <button id="btn-right" class="bg-gray-300 hover:bg-gray-400 p-3 rounded">
                <i class="fas fa-arrow-right"></i>
            </button>
            <div></div>
            <button id="btn-down" class="bg-gray-300 hover:bg-gray-400 p-3 rounded">
                <i class="fas fa-arrow-down"></i>
            </button>
            <div></div>
        </div>

        <button id="startBtn" class="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg font-semibold">
            Start Game
        </button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score');
        const hiScoreDisplay = document.getElementById('high-score');
        const startGameBtn = document.getElementById('startBtn');

        // Config
        const boxSize = 20;
        const boxesPerRow = canvas.width / boxSize;
        let topScore = parseInt(localStorage.getItem('snakeTopScore')) || 0;
        hiScoreDisplay.textContent = topScore;

        // Variables to manage state
        let snake = [];
        let food = { x: 10, y: 10 };
        let moveDir = 'right'; 
        let queuedDir = 'right'; 
        let points = 0;
        let isPlaying = false;
        let loopTimer;
        let speed = 150; // speed in ms

        function resetGame() {
            snake = [
                { x: 5, y: 5 },
                { x: 4, y: 5 },
                { x: 3, y: 5 }
            ];
            placeRandomFood();
            moveDir = 'right';
            queuedDir = 'right';
            points = 0;
            scoreDisplay.textContent = points;
            isPlaying = true;
            canvas.classList.remove('game-over');
            speed = 150;
        }

        function placeRandomFood() {
            food.x = Math.floor(Math.random() * boxesPerRow);
            food.y = Math.floor(Math.random() * boxesPerRow);

            // avoid placing food inside the snake
            if (snake.some(part => part.x === food.x && part.y === food.y)) {
                placeRandomFood(); // just re-call it (kinda lazy, but works)
            }
        }

        function updateGame() {
            if (!isPlaying) return;

            moveDir = queuedDir;

            const head = { x: snake[0].x, y: snake[0].y };

            // Direction logic
            if (moveDir === 'up') head.y--;
            else if (moveDir === 'down') head.y++;
            else if (moveDir === 'left') head.x--;
            else if (moveDir === 'right') head.x++;

            // Border collision or self-hit
            if (head.x < 0 || head.x >= boxesPerRow || head.y < 0 || head.y >= boxesPerRow || 
                snake.some(segment => segment.x === head.x && segment.y === head.y)) {
                triggerGameOver();
                return;
            }

            snake.unshift(head);

            if (head.x === food.x && head.y === food.y) {
                points++;
                scoreDisplay.textContent = points;
                placeRandomFood();

                if (points % 5 === 0 && speed > 60) { // slightly loosened limit
                    speed -= 5;
                    clearInterval(loopTimer);
                    loopTimer = setInterval(updateGame, speed);
                }
            } else {
                snake.pop();
            }

            drawEverything();
        }

        function drawEverything() {
            ctx.fillStyle = '#f3f4f6';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw snake
            snake.forEach((segment, index) => {
                ctx.fillStyle = index === 0 ? '#1f2937' : '#4b5563';
                ctx.fillRect(segment.x * boxSize, segment.y * boxSize, boxSize - 1, boxSize - 1);
            });

            // Draw food
            ctx.fillStyle = '#ef4444';
            ctx.fillRect(food.x * boxSize, food.y * boxSize, boxSize - 1, boxSize - 1);
        }

        function triggerGameOver() {
            isPlaying = false;
            canvas.classList.add('game-over');
            clearInterval(loopTimer);

            if (points > topScore) {
                topScore = points;
                hiScoreDisplay.textContent = topScore;
                localStorage.setItem('snakeTopScore', topScore);
            }

            startGameBtn.textContent = 'Play Again';
        }

        // Controls
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowUp' && moveDir !== 'down') queuedDir = 'up';
            else if (e.key === 'ArrowDown' && moveDir !== 'up') queuedDir = 'down';
            else if (e.key === 'ArrowLeft' && moveDir !== 'right') queuedDir = 'left';
            else if (e.key === 'ArrowRight' && moveDir !== 'left') queuedDir = 'right';
        });

        // Mobile controls
        document.getElementById('btn-up').addEventListener('click', () => {
            if (moveDir !== 'down') queuedDir = 'up';
        });
        document.getElementById('btn-down').addEventListener('click', () => {
            if (moveDir !== 'up') queuedDir = 'down';
        });
        document.getElementById('btn-left').addEventListener('click', () => {
            if (moveDir !== 'right') queuedDir = 'left';
        });
        document.getElementById('btn-right').addEventListener('click', () => {
            if (moveDir !== 'left') queuedDir = 'right';
        });

        startGameBtn.addEventListener('click', () => {
            resetGame();
            clearInterval(loopTimer);
            loopTimer = setInterval(updateGame, speed);
            startGameBtn.textContent = 'Restart Game';
        });

        drawEverything(); // draw first frame
    </script>
</body>
</html>
